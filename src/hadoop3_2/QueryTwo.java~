package hadoop3_2;
import java.io.IOException;
import java.util.StringTokenizer;
import java.util.HashMap;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

public class QueryTwo {
	
	public static class QueryMapper
			extends Mapper<Object, Text, IntWritable, DoubleWritable> {
		private HashMap<int, String> table;
		public void setup(Context context) {
			//make the hash table here to populate with <custid, min, max>
			table = new HashMap<int, String>();
		}
		
		public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
			//populate the hash table here with
			String[] elems = value.toString().split(",");
			int custID = Integer.parseInt(elems[1]);
			double transValue = Double.parseDouble(elems[2]);
			if(table.containsKey(custID)){
				String[] current = table.get(custID).split(",");
				int numTrans = Integer.parseInt(current[0]);
				double total = Double.parseDouble(current[1]);
				numTrans++;
				total += transValue;
				table.put(custID, Integer.toString(numTrans) + "," + Double.toString(total));
			} else {
				table.put(custID, "1," + Double.toString(transValue));
			}
		}

		public void cleanup(Context context) {
			Iterator it = table.keySet().iterator();
			while(it.hasNext()){
				Map.Entry pair = (Map.Entry) it.next();
				IntWritable cID = new IntWritable(pair.getKey());
				Text info = new Text(pair.getValue());
				context.write(cID, info);
			}
		}
	}

	public static void main(String args[]) {
		Configuration conf = new Configuration();
		Job j = Job.getInstance(conf, "Query Two");
		j.setJarByClass(QueryTwo.class);
		j.setMapperClass(QueryMapper.class);
		j.setOutputKeyClass(IntWritable.class);
		j.setOutputValueClass(Text.class);
		FileInputFormat.setInputPaths(j, new Path(args[0]));
		FileOutputFormat.setOutputPath(j, new Path(args[1]));
		System.exit(j.waitForCompletion(true) ? 0 : 1);
	}

	

	

}
